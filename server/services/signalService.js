const TechnicalSnapshot = require('../models/TechnicalSnapshot');
const News = require('../models/News');
const EconomicFactor = require('../models/EconomicFactor');
const Signal = require('../models/Signal');

/**
 * Service t·ªïng h·ª£p t√≠n hi·ªáu giao d·ªãch t·ª´ 3 ngu·ªìn:
 * 1. Technical Analysis (RSI, MACD, EMA...)
 * 2. News Sentiment (AI analysis)
 * 3. Macro Economic (FRED data)
 */
class SignalService {
  constructor() {
    this.weights = {
      technical: 0.4,    // 40% tr·ªçng s·ªë
      news: 0.35,        // 35% tr·ªçng s·ªë
      macro: 0.25        // 25% tr·ªçng s·ªë
    };
  }

  /**
   * Main function: Sinh t√≠n hi·ªáu giao d·ªãch t·ªïng h·ª£p
   */
  async generateSignal() {
    try {
      console.log('üéØ Generating signal...');
      
      // ‚úÖ ADD: More detailed error handling
      let technicalData, newsData, macroData;
      
      try {
        technicalData = await this.getLatestTechnicalData();
        console.log(`üìä Technical data: ${technicalData ? '‚úì' : '‚úó'}`);
      } catch (error) {
        console.error('‚ùå Technical data error:', error.message);
        technicalData = null;
      }
      
      try {
        newsData = await this.getLatestNewsData();
        console.log(`üì∞ News data: ${newsData.length} articles`);
      } catch (error) {
        console.error('‚ùå News data error:', error.message);
        newsData = [];
      }
      
      try {
        macroData = await this.getLatestMacroData();
        console.log(`üìà Macro data: ${macroData.length} factors`);
      } catch (error) {
        console.error('‚ùå Macro data error:', error.message);
        macroData = [];
      }
      
      if (!technicalData) {
        return { success: false, error: 'No technical data available' };
      }
      
      // Continue v·ªõi ph·∫ßn generate signal...
      const technicalAnalysis = this.analyzeTechnical(technicalData);
      const newsAnalysis = this.analyzeNews(newsData);
      const macroAnalysis = this.analyzeMacro(macroData);
      
      console.log('üìä Technical Score:', technicalAnalysis.score);
      console.log('üì∞ News Score:', newsAnalysis.score);
      console.log('üìà Macro Score:', macroAnalysis.score);

      // 3. T·ªïng h·ª£p ƒëi·ªÉm s·ªë
      const overallScore = this.calculateOverallScore(
        technicalAnalysis, 
        newsAnalysis, 
        macroAnalysis
      );

      // 4. Sinh t√≠n hi·ªáu cu·ªëi c√πng
      const finalSignal = await this.generateFinalSignal(
        overallScore,
        technicalData,
        technicalAnalysis,
        newsAnalysis,
        macroAnalysis
      );

      // ‚úÖ SAVE TO DATABASE HERE
      const Signal = require('../models/Signal');
      const savedSignal = await Signal.create(finalSignal);
      
      console.log(`‚úÖ Signal saved: ${finalSignal.action} (${finalSignal.confidence}%)`);

      return {
        success: true,
        signal: savedSignal,
        breakdown: {
          technical: technicalAnalysis,
          news: newsAnalysis,
          macro: macroAnalysis
        },
        timestamp: new Date()
      };

    } catch (error) {
      console.error('‚ùå Signal generation failed:', error.message);
      return {
        success: false,
        error: error.message,
        timestamp: new Date()
      };
    }
  }

  /**
   * L·∫•y d·ªØ li·ªáu k·ªπ thu·∫≠t m·ªõi nh·∫•t
   */
  async getLatestTechnicalData() {
    try {
      const snapshot = await TechnicalSnapshot.findOne()
        .sort({ timestamp: -1 })
        .limit(1);
      
      if (!snapshot) {
        console.log('‚ö†Ô∏è No technical snapshot found');
        return null;
      }

      // Check if data is recent (within 6 hours)
      const sixHoursAgo = new Date(Date.now() - 6 * 60 * 60 * 1000);
      if (snapshot.timestamp < sixHoursAgo) {
        console.log('‚ö†Ô∏è Technical data is stale (>6h old)');
      }

      return snapshot;
    } catch (error) {
      console.error('‚ùå Get Technical Data Error:', error.message);
      return null;
    }
  }

  /**
   * L·∫•y d·ªØ li·ªáu tin t·ª©c 24h g·∫ßn nh·∫•t
   */
  async getLatestNewsData() {
    try {
      const last24Hours = new Date(Date.now() - 24 * 60 * 60 * 1000);
      
      const news = await News.find({
        publishedAt: { $gte: last24Hours },
        isProcessed: true
      })
      .sort({ publishedAt: -1, confidence: -1 })
      .limit(10)
      .select('aiSentiment impactOnGold confidence category');

      console.log(`üì∞ Found ${news.length} news articles in last 24h`);
      return news;
    } catch (error) {
      console.error('‚ùå Get News Data Error:', error.message);
      return [];
    }
  }

  /**
   * L·∫•y d·ªØ li·ªáu kinh t·∫ø vƒ© m√¥ 7 ng√†y g·∫ßn nh·∫•t
   */
  async getLatestMacroData() {
    try {
      const last7Days = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);
      
      const factors = await EconomicFactor.find({
        releaseDate: { $gte: last7Days },
        source: 'FRED'
      })
      .sort({ releaseDate: -1, importance: -1 })
      .limit(5)
      .select('sentiment impactOnGold confidence importance category');

      console.log(`üìà Found ${factors.length} economic factors in last 7 days`);
      return factors;
    } catch (error) {
      console.error('‚ùå Get Macro Data Error:', error.message);
      return [];
    }
  }

  /**
   * Ph√¢n t√≠ch k·ªπ thu·∫≠t
   */
  analyzeTechnical(snapshot) {
    const { indicators, strength } = snapshot;
    const { RSI, MACD, trend } = indicators;
    
    let score = 50; // Base neutral score
    let reasoning = [];
    let signals = [];

    // RSI Analysis (ƒëi·ªÅu ch·ªânh ng∆∞·ª°ng cho H4)
    if (RSI > 65) {
      score -= 15;
      reasoning.push('RSI qu√° mua (>65)');
      signals.push('‚ö†Ô∏è RSI overbought');
    } else if (RSI < 35) {
      score += 15;
      reasoning.push('RSI qu√° b√°n (<35)');
      signals.push('üìà RSI oversold - c∆° h·ªôi mua');
    } else if (RSI > 55) {
      score += 10;
      reasoning.push('RSI bullish momentum');
      signals.push('üí™ RSI trending up');
    } else if (RSI < 45) {
      score -= 10;
      reasoning.push('RSI bearish momentum');
      signals.push('üìâ RSI trending down');
    }

    // MACD Analysis
    if (MACD.trend === 'bullish_cross') {
      score += 20;
      reasoning.push('MACD bullish crossover');
      signals.push('üöÄ MACD golden cross');
    } else if (MACD.trend === 'bearish_cross') {
      score -= 20;
      reasoning.push('MACD bearish crossover');
      signals.push('üíÄ MACD death cross');
    } else if (MACD.trend === 'bullish') {
      score += 10;
      reasoning.push('MACD above signal line');
      signals.push('üìà MACD bullish');
    } else if (MACD.trend === 'bearish') {
      score -= 10;
      reasoning.push('MACD below signal line');
      signals.push('üìâ MACD bearish');
    }

    // Trend Analysis
    if (trend === 'uptrend') {
      score += 15;
      reasoning.push('Price in uptrend');
      signals.push('‚¨ÜÔ∏è Uptrend confirmed');
    } else if (trend === 'downtrend') {
      score -= 15;
      reasoning.push('Price in downtrend');
      signals.push('‚¨áÔ∏è Downtrend confirmed');
    }

    // Market Strength
    if (strength >= 70) {
      score += 10;
      reasoning.push(`Strong momentum (${strength})`);
    } else if (strength <= 30) {
      score -= 10;
      reasoning.push(`Weak momentum (${strength})`);
    }

    // Normalize score to 0-100
    score = Math.max(0, Math.min(100, score));

    return {
      score,
      reasoning,
      signals,
      details: {
        RSI,
        MACD: MACD.trend,
        trend,
        strength
      }
    };
  }

  /**
   * Ph√¢n t√≠ch tin t·ª©c
   */
  analyzeNews(newsArray) {
    if (!newsArray || newsArray.length === 0) {
      return {
        score: 50, // Neutral if no news
        reasoning: ['No recent news available'],
        signals: ['üì∞ No news impact'],
        details: { count: 0 }
      };
    }

    let totalScore = 0;
    let weightedSum = 0;
    let reasoning = [];
    let signals = [];
    
    let positiveCount = 0;
    let negativeCount = 0;
    let neutralCount = 0;

    newsArray.forEach(news => {
      const weight = news.confidence / 100;
      let newsScore = 50; // Base neutral

      switch (news.impactOnGold) {
        case 'positive':
          newsScore = 70 + (news.confidence - 60) * 0.5; // 70-85 range
          positiveCount++;
          break;
        case 'negative':
          newsScore = 30 - (news.confidence - 60) * 0.5; // 15-30 range
          negativeCount++;
          break;
        default:
          newsScore = 50;
          neutralCount++;
      }

      totalScore += newsScore * weight;
      weightedSum += weight;
    });

    const finalScore = weightedSum > 0 ? totalScore / weightedSum : 50;

    // Generate reasoning
    if (positiveCount > negativeCount) {
      reasoning.push(`${positiveCount} positive vs ${negativeCount} negative news`);
      signals.push('üìà News sentiment bullish for gold');
    } else if (negativeCount > positiveCount) {
      reasoning.push(`${negativeCount} negative vs ${positiveCount} positive news`);
      signals.push('üìâ News sentiment bearish for gold');
    } else {
      reasoning.push('Mixed news sentiment');
      signals.push('‚öñÔ∏è Neutral news sentiment');
    }

    return {
      score: Math.round(finalScore),
      reasoning,
      signals,
      details: {
        count: newsArray.length,
        positive: positiveCount,
        negative: negativeCount,
        neutral: neutralCount
      }
    };
  }

  /**
   * Ph√¢n t√≠ch kinh t·∫ø vƒ© m√¥
   */
  analyzeMacro(factorsArray) {
    if (!factorsArray || factorsArray.length === 0) {
      return {
        score: 50, // Neutral if no macro data
        reasoning: ['No recent economic data'],
        signals: ['üìä No macro impact'],
        details: { count: 0 }
      };
    }

    let totalScore = 0;
    let weightedSum = 0;
    let reasoning = [];
    let signals = [];
    
    let positiveCount = 0;
    let negativeCount = 0;
    let neutralCount = 0;

    factorsArray.forEach(factor => {
      // Weight by importance and confidence
      const importanceWeight = factor.importance === 'high' ? 1.0 : 
                              factor.importance === 'medium' ? 0.7 : 0.4;
      const confidenceWeight = factor.confidence / 100;
      const weight = importanceWeight * confidenceWeight;

      let factorScore = 50; // Base neutral

      switch (factor.impactOnGold) {
        case 'positive':
          factorScore = 65 + (factor.confidence - 50) * 0.3;
          positiveCount++;
          break;
        case 'negative':
          factorScore = 35 - (factor.confidence - 50) * 0.3;
          negativeCount++;
          break;
        default:
          factorScore = 50;
          neutralCount++;
      }

      totalScore += factorScore * weight;
      weightedSum += weight;
    });

    const finalScore = weightedSum > 0 ? totalScore / weightedSum : 50;

    // Generate reasoning
    if (positiveCount > negativeCount) {
      reasoning.push(`${positiveCount} positive vs ${negativeCount} negative economic factors`);
      signals.push('üìä Macro environment bullish for gold');
    } else if (negativeCount > positiveCount) {
      reasoning.push(`${negativeCount} negative vs ${positiveCount} positive economic factors`);
      signals.push('üìä Macro environment bearish for gold');
    } else {
      reasoning.push('Mixed macro environment');
      signals.push('‚öñÔ∏è Neutral macro environment');
    }

    return {
      score: Math.round(finalScore),
      reasoning,
      signals,
      details: {
        count: factorsArray.length,
        positive: positiveCount,
        negative: negativeCount,
        neutral: neutralCount
      }
    };
  }

  /**
   * T√≠nh ƒëi·ªÉm t·ªïng h·ª£p
   */
  calculateOverallScore(technical, news, macro) {
    const weightedScore = 
      (technical.score * this.weights.technical) +
      (news.score * this.weights.news) + 
      (macro.score * this.weights.macro);

    return {
      overall: Math.round(weightedScore),
      breakdown: {
        technical: Math.round(technical.score * this.weights.technical),
        news: Math.round(news.score * this.weights.news),
        macro: Math.round(macro.score * this.weights.macro)
      },
      weights: this.weights
    };
  }

  /**
   * Sinh t√≠n hi·ªáu cu·ªëi c√πng v·ªõi ph√¢n t√≠ch chi ti·∫øt
   */
  async generateFinalSignal(overallScore, technicalData, technical, news, macro) {
    const currentPrice = technicalData.price.close;
    const score = overallScore.overall;
    
    let action = 'HOLD';
    let confidence = 50;
    let entryZone = [];
    let stopLoss = null;
    let takeProfit = null;
    
    // Determine action based on score
    if (score >= 65) {
      action = 'BUY';
      confidence = Math.min(85, score);
      
      // Calculate entry zone (current price ¬± 0.3%)
      const entryLow = currentPrice * 0.997;
      const entryHigh = currentPrice * 1.003;
      entryZone = [Math.round(entryLow * 100) / 100, Math.round(entryHigh * 100) / 100];
      
      // Calculate SL and TP for BUY
      stopLoss = Math.round(currentPrice * 0.985 * 100) / 100; // -1.5%
      takeProfit = Math.round(currentPrice * 1.025 * 100) / 100; // +2.5%
      
    } else if (score <= 35) {
      action = 'SELL';
      confidence = Math.min(85, 100 - score);
      
      // Calculate entry zone
      const entryLow = currentPrice * 0.997;
      const entryHigh = currentPrice * 1.003;
      entryZone = [Math.round(entryLow * 100) / 100, Math.round(entryHigh * 100) / 100];
      
      // Calculate SL and TP for SELL
      stopLoss = Math.round(currentPrice * 1.015 * 100) / 100; // +1.5%
      takeProfit = Math.round(currentPrice * 0.975 * 100) / 100; // -2.5%
      
    } else {
      action = 'HOLD';
      confidence = 100 - Math.abs(score - 50) * 2; // Closer to 50 = higher confidence in HOLD
    }

    // Combine all reasoning
    const allReasoning = [
      ...technical.reasoning,
      ...news.reasoning,
      ...macro.reasoning
    ];

    // ‚úÖ NEW: Generate detailed analysis instead of simple summary
    const detailedAnalysis = this.generateDetailedAnalysis(action, technical, news, macro, confidence, technicalData);

    return {
      timeframe: '4H',
      action,
      confidence: Math.round(confidence),
      entryZone,
      stopLoss,
      takeProfit,
      priceAtSignal: currentPrice,
      reasoning: allReasoning,
      
      // ‚úÖ NEW: Replace summary with detailed analysis
      summary: detailedAnalysis.fullAnalysis,
      detailedAnalysis: detailedAnalysis, // Keep structured version for potential future use
      
      // Detailed scores for transparency
      technicalScore: technical.score,
      newsScore: news.score,
      macroScore: macro.score,
      overallScore: score,
      
      // Risk metrics
      riskRewardRatio: action !== 'HOLD' ? 
        Math.round((Math.abs(takeProfit - currentPrice) / Math.abs(stopLoss - currentPrice)) * 100) / 100 : null,
      
      // Additional signals
      signals: [
        ...technical.signals,
        ...news.signals,
        ...macro.signals
      ]
    };
  }

  /**
   * T·∫°o ph√¢n t√≠ch chi ti·∫øt t·ª´ 3 ngu·ªìn thay v√¨ t√≥m t·∫Øt ng·∫Øn
   */
  generateDetailedAnalysis(action, technical, news, macro, confidence, technicalData) {
    const currentPrice = technicalData.price.close;
    
    // üìä Technical Analysis Section
    const technicalSection = this.generateTechnicalSection(technical, technicalData);
    
    // üì∞ News Analysis Section  
    const newsSection = this.generateNewsSection(news);
    
    // üìà Macro Analysis Section
    const macroSection = this.generateMacroSection(macro);
    
    // üéØ Final Recommendation Section
    const recommendationSection = this.generateRecommendationSection(action, confidence, currentPrice, technical, news, macro);
    
    // Combine all sections
    return {
      technical: technicalSection,
      news: newsSection,
      macro: macroSection,
      recommendation: recommendationSection,
      fullAnalysis: `${technicalSection}\n\n${newsSection}\n\n${macroSection}\n\n${recommendationSection}`
    };
  }

  /**
   * üìä Generate Technical Analysis Section
   */
  generateTechnicalSection(technical, technicalData) {
    const { RSI, MACD, trend, strength } = technical.details;
    const { price } = technicalData;
    
    let analysis = "üìä **PH√ÇN T√çCH K·ª∏ THU·∫¨T:**\n";
    
    // Price Action
    analysis += `‚Ä¢ Gi√° hi·ªán t·∫°i: $${price.close.toFixed(2)} (H: $${price.high.toFixed(2)} | L: $${price.low.toFixed(2)})\n`;
    
    // RSI Analysis
    if (RSI > 65) {
      analysis += `‚Ä¢ RSI ${RSI}: V√ông qu√° mua - √°p l·ª±c b√°n c√≥ th·ªÉ xu·∫•t hi·ªán\n`;
    } else if (RSI < 35) {
      analysis += `‚Ä¢ RSI ${RSI}: V√πng qu√° b√°n - c∆° h·ªôi mua v√†o t·ªët\n`;
    } else if (RSI > 55) {
      analysis += `‚Ä¢ RSI ${RSI}: Momentum t√≠ch c·ª±c, xu h∆∞·ªõng tƒÉng kh·∫£ quan\n`;
    } else if (RSI < 45) {
      analysis += `‚Ä¢ RSI ${RSI}: Momentum ti√™u c·ª±c, √°p l·ª±c gi·∫£m\n`;
    } else {
      analysis += `‚Ä¢ RSI ${RSI}: Trung t√≠nh, ch·ªù t√≠n hi·ªáu r√µ r√†ng h∆°n\n`;
    }
    
    // MACD Analysis
    switch (MACD) {
      case 'bullish_cross':
        analysis += `‚Ä¢ MACD: Golden Cross - t√≠n hi·ªáu mua m·∫°nh, ƒë·ªông l·ª±c tƒÉng\n`;
        break;
      case 'bearish_cross':
        analysis += `‚Ä¢ MACD: Death Cross - t√≠n hi·ªáu b√°n m·∫°nh, ƒë·ªông l·ª±c gi·∫£m\n`;
        break;
      case 'bullish':
        analysis += `‚Ä¢ MACD: Duy tr√¨ tr√™n signal line - xu h∆∞·ªõng tƒÉng ti·∫øp t·ª•c\n`;
        break;
      case 'bearish':
        analysis += `‚Ä¢ MACD: Duy tr√¨ d∆∞·ªõi signal line - xu h∆∞·ªõng gi·∫£m ti·∫øp t·ª•c\n`;
        break;
      default:
        analysis += `‚Ä¢ MACD: Dao ƒë·ªông g·∫ßn v√πng 0 - ch·ªù ƒë·ªôt ph√°\n`;
    }
    
    // Trend Analysis
    switch (trend) {
      case 'uptrend':
        analysis += `‚Ä¢ Xu h∆∞·ªõng: TƒÇNG r√µ r√†ng - ∆∞u ti√™n t√¨m ƒëi·ªÉm mua\n`;
        break;
      case 'downtrend':
        analysis += `‚Ä¢ Xu h∆∞·ªõng: GI·∫¢M r√µ r√†ng - ∆∞u ti√™n t√¨m ƒëi·ªÉm b√°n\n`;
        break;
      default:
        analysis += `‚Ä¢ Xu h∆∞·ªõng: SIDEWAYS - th·ªã tr∆∞·ªùng ƒëi ngang\n`;
    }
    
    // Market Strength
    if (strength >= 70) {
      analysis += `‚Ä¢ S·ª©c m·∫°nh th·ªã tr∆∞·ªùng: ${strength}/100 - R·∫•t m·∫°nh\n`;
    } else if (strength >= 50) {
      analysis += `‚Ä¢ S·ª©c m·∫°nh th·ªã tr∆∞·ªùng: ${strength}/100 - Trung b√¨nh kh√°\n`;
    } else {
      analysis += `‚Ä¢ S·ª©c m·∫°nh th·ªã tr∆∞·ªùng: ${strength}/100 - Y·∫øu\n`;
    }
    
    analysis += `‚û§ **ƒêi·ªÉm k·ªπ thu·∫≠t: ${technical.score}/100**`;
    
    return analysis;
  }

  /**
   * üì∞ Generate News Analysis Section
   */
  generateNewsSection(news) {
    let analysis = "üì∞ **PH√ÇN T√çCH TIN T·ª®C (24H):**\n";
    
    const { count, positive, negative, neutral } = news.details;
    
    if (count === 0) {
      analysis += "‚Ä¢ Kh√¥ng c√≥ tin t·ª©c ƒë√°ng ch√∫ √Ω trong 24h qua\n";
      analysis += "‚Ä¢ Th·ªã tr∆∞·ªùng thi·∫øu catalyst t·ª´ tin t·ª©c\n";
      analysis += `‚û§ **ƒêi·ªÉm tin t·ª©c: ${news.score}/100** (Trung t√≠nh)`;
      return analysis;
    }
    
    // News Summary
    analysis += `‚Ä¢ T·ªïng ${count} tin trong 24h: ${positive} t√≠ch c·ª±c, ${negative} ti√™u c·ª±c, ${neutral} trung t√≠nh\n`;
    
    // Sentiment Analysis
    if (positive > negative) {
      analysis += `‚Ä¢ Sentiment: T√çCH C·ª∞C cho v√†ng - tin t·ª©c h·ªó tr·ª£ xu h∆∞·ªõng tƒÉng\n`;
      if (positive >= negative * 2) {
        analysis += `‚Ä¢ M·ª©c ƒë·ªô: R·∫•t t√≠ch c·ª±c - nhi·ªÅu y·∫øu t·ªë h·ªó tr·ª£ v√†ng\n`;
      } else {
        analysis += `‚Ä¢ M·ª©c ƒë·ªô: T√≠ch c·ª±c v·ª´a ph·∫£i - m·ªôt s·ªë y·∫øu t·ªë h·ªó tr·ª£\n`;
      }
    } else if (negative > positive) {
      analysis += `‚Ä¢ Sentiment: TI√äU C·ª∞C cho v√†ng - tin t·ª©c t·∫°o √°p l·ª±c b√°n\n`;
      if (negative >= positive * 2) {
        analysis += `‚Ä¢ M·ª©c ƒë·ªô: R·∫•t ti√™u c·ª±c - nhi·ªÅu y·∫øu t·ªë b·∫•t l·ª£i cho v√†ng\n`;
      } else {
        analysis += `‚Ä¢ M·ª©c ƒë·ªô: Ti√™u c·ª±c v·ª´a ph·∫£i - m·ªôt s·ªë y·∫øu t·ªë b·∫•t l·ª£i\n`;
      }
    } else {
      analysis += `‚Ä¢ Sentiment: TRUNG T√çNH - tin t·ª©c tr√°i chi·ªÅu\n`;
      analysis += `‚Ä¢ M·ª©c ƒë·ªô: C√¢n b·∫±ng - kh√¥ng c√≥ bias r√µ r√†ng\n`;
    }
    
    // Key factors
    if (news.signals && news.signals.length > 0) {
      analysis += `‚Ä¢ Y·∫øu t·ªë ch√≠nh: ${news.signals[0].replace(/üìà|üìâ|‚öñÔ∏è|üì∞/g, '').trim()}\n`;
    }
    
    analysis += `‚û§ **ƒêi·ªÉm tin t·ª©c: ${news.score}/100**`;
    
    return analysis;
  }

  /**
   * üìà Generate Macro Analysis Section
   */
  generateMacroSection(macro) {
    let analysis = "üìà **PH√ÇN T√çCH Vƒ® M√î (7 NG√ÄY):**\n";
    
    const { count, positive, negative, neutral } = macro.details;
    
    if (count === 0) {
      analysis += "‚Ä¢ Kh√¥ng c√≥ d·ªØ li·ªáu kinh t·∫ø m·ªõi trong 7 ng√†y qua\n";
      analysis += "‚Ä¢ Th·ªã tr∆∞·ªùng ch·ªù ƒë·ª£i d·ªØ li·ªáu kinh t·∫ø ti·∫øp theo\n";
      analysis += `‚û§ **ƒêi·ªÉm vƒ© m√¥: ${macro.score}/100** (Kh√¥ng c√≥ d·ªØ li·ªáu)`;
      return analysis;
    }
    
    // Macro Summary
    analysis += `‚Ä¢ ${count} ch·ªâ s·ªë kinh t·∫ø: ${positive} t√≠ch c·ª±c, ${negative} ti√™u c·ª±c cho v√†ng\n`;
    
    // Economic Environment
    if (positive > negative) {
      analysis += `‚Ä¢ M√¥i tr∆∞·ªùng vƒ© m√¥: H·ªñ TR·ª¢ v√†ng\n`;
      analysis += `‚Ä¢ C√°c y·∫øu t·ªë: Fed dovish, l·∫°m ph√°t th·∫•p, ho·∫∑c tƒÉng tr∆∞·ªüng ch·∫≠m\n`;
    } else if (negative > positive) {
      analysis += `‚Ä¢ M√¥i tr∆∞·ªùng vƒ© m√¥: B·∫§T L·ª¢I cho v√†ng\n`;
      analysis += `‚Ä¢ C√°c y·∫øu t·ªë: Fed hawkish, kinh t·∫ø m·∫°nh, ho·∫∑c DXY tƒÉng\n`;
    } else {
      analysis += `‚Ä¢ M√¥i tr∆∞·ªùng vƒ© m√¥: TRUNG T√çNH\n`;
      analysis += `‚Ä¢ C√°c y·∫øu t·ªë: D·ªØ li·ªáu kinh t·∫ø tr√°i chi·ªÅu\n`;
    }
    
    // Key macro signals
    if (macro.signals && macro.signals.length > 0) {
      analysis += `‚Ä¢ T√≠n hi·ªáu ch√≠nh: ${macro.signals[0].replace(/üìä|‚öñÔ∏è/g, '').trim()}\n`;
    }
    
    // Impact assessment
    if (macro.score >= 60) {
      analysis += `‚Ä¢ T√°c ƒë·ªông: H·ªó tr·ª£ t√≠ch c·ª±c cho gi√° v√†ng\n`;
    } else if (macro.score <= 40) {
      analysis += `‚Ä¢ T√°c ƒë·ªông: T·∫°o √°p l·ª±c gi·∫£m l√™n gi√° v√†ng\n`;
    } else {
      analysis += `‚Ä¢ T√°c ƒë·ªông: Kh√¥ng t·∫°o bias r√µ r√†ng\n`;
    }
    
    analysis += `‚û§ **ƒêi·ªÉm vƒ© m√¥: ${macro.score}/100**`;
    
    return analysis;
  }

  /**
   * üéØ Generate Final Recommendation Section
   */
  generateRecommendationSection(action, confidence, currentPrice, technical, news, macro) {
    let analysis = "üéØ **G·ª¢I √ù GIAO D·ªäCH:**\n";
    
    // Overall Assessment
    const overallScore = Math.round((technical.score * 0.4) + (news.score * 0.35) + (macro.score * 0.25));
    
    analysis += `‚Ä¢ ƒêi·ªÉm t·ªïng h·ª£p: ${overallScore}/100 (K·ªπ thu·∫≠t: ${technical.score}, Tin t·ª©c: ${news.score}, Vƒ© m√¥: ${macro.score})\n`;
    
    // Action Recommendation
    switch (action) {
      case 'BUY':
        analysis += `‚Ä¢ **KHUY·∫æN NGH·ªä: MUA V√ÄNG** üìà\n`;
        analysis += `‚Ä¢ ƒê·ªô tin c·∫≠y: ${confidence}% - ${confidence >= 75 ? 'Cao' : confidence >= 60 ? 'Trung b√¨nh' : 'Th·∫•p'}\n`;
        analysis += `‚Ä¢ L√Ω do ch√≠nh: `;
        
        // Identify strongest factor
        if (technical.score >= 60 && news.score >= 60) {
          analysis += `C·∫£ k·ªπ thu·∫≠t v√† tin t·ª©c ƒë·ªÅu h·ªó tr·ª£\n`;
        } else if (technical.score >= 60) {
          analysis += `T√≠n hi·ªáu k·ªπ thu·∫≠t m·∫°nh\n`;
        } else if (news.score >= 60) {
          analysis += `Tin t·ª©c t√≠ch c·ª±c cho v√†ng\n`;
        } else if (macro.score >= 60) {
          analysis += `M√¥i tr∆∞·ªùng vƒ© m√¥ thu·∫≠n l·ª£i\n`;
        } else {
          analysis += `T·ªïng h·ª£p c√°c y·∫øu t·ªë nghi√™ng v·ªÅ t√≠ch c·ª±c\n`;
        }
        
        analysis += `‚Ä¢ V√πng v√†o l·ªánh: Quanh $${currentPrice.toFixed(2)} ¬± 0.3%\n`;
        analysis += `‚Ä¢ Qu·∫£n l√Ω r·ªßi ro: ƒê·∫∑t stop loss n·∫øu xu h∆∞·ªõng ƒë·∫£o chi·ªÅu\n`;
        break;
        
      case 'SELL':
        analysis += `‚Ä¢ **KHUY·∫æN NGH·ªä: B√ÅN V√ÄNG** üìâ\n`;
        analysis += `‚Ä¢ ƒê·ªô tin c·∫≠y: ${confidence}% - ${confidence >= 75 ? 'Cao' : confidence >= 60 ? 'Trung b√¨nh' : 'Th·∫•p'}\n`;
        analysis += `‚Ä¢ L√Ω do ch√≠nh: `;
        
        if (technical.score <= 40 && news.score <= 40) {
          analysis += `C·∫£ k·ªπ thu·∫≠t v√† tin t·ª©c ƒë·ªÅu b·∫•t l·ª£i\n`;
        } else if (technical.score <= 40) {
          analysis += `T√≠n hi·ªáu k·ªπ thu·∫≠t y·∫øu\n`;
        } else if (news.score <= 40) {
          analysis += `Tin t·ª©c ti√™u c·ª±c cho v√†ng\n`;
        } else if (macro.score <= 40) {
          analysis += `M√¥i tr∆∞·ªùng vƒ© m√¥ b·∫•t l·ª£i\n`;
        } else {
          analysis += `T·ªïng h·ª£p c√°c y·∫øu t·ªë nghi√™ng v·ªÅ ti√™u c·ª±c\n`;
        }
        
        analysis += `‚Ä¢ V√πng v√†o l·ªánh: Quanh $${currentPrice.toFixed(2)} ¬± 0.3%\n`;
        analysis += `‚Ä¢ Qu·∫£n l√Ω r·ªßi ro: ƒê·∫∑t stop loss n·∫øu xu h∆∞·ªõng ƒë·∫£o chi·ªÅu\n`;
        break;
        
      default: // HOLD
        analysis += `‚Ä¢ **KHUY·∫æN NGH·ªä: QUAN S√ÅT** ‚è∏Ô∏è\n`;
        analysis += `‚Ä¢ ƒê·ªô tin c·∫≠y: ${confidence}% - Kh√¥ng c√≥ t√≠n hi·ªáu r√µ r√†ng\n`;
        analysis += `‚Ä¢ L√Ω do: `;
        
        if (Math.abs(technical.score - 50) <= 10 && Math.abs(news.score - 50) <= 10) {
          analysis += `T·∫•t c·∫£ c√°c y·∫øu t·ªë ƒë·ªÅu trung t√≠nh\n`;
        } else {
          analysis += `C√°c y·∫øu t·ªë tr√°i chi·ªÅu, ch∆∞a c√≥ consensus\n`;
        }
        
        analysis += `‚Ä¢ H√†nh ƒë·ªông: Ch·ªù t√≠n hi·ªáu r√µ r√†ng h∆°n t·ª´ k·ªπ thu·∫≠t ho·∫∑c tin t·ª©c\n`;
        analysis += `‚Ä¢ Theo d√µi: Breakout kh·ªèi v√πng sideways ho·∫∑c tin t·ª©c quan tr·ªçng\n`;
    }
    
    // Risk Warning
    analysis += `\n‚ö†Ô∏è **L∆ØU √ù R·ª¶I RO:**\n`;
    analysis += `‚Ä¢ V√†ng c√≥ bi·∫øn ƒë·ªông cao, lu√¥n s·ª≠ d·ª•ng stop loss\n`;
    analysis += `‚Ä¢ Theo d√µi tin t·ª©c Fed, CPI, v√† geopolitical events\n`;
    analysis += `‚Ä¢ Kh√¥ng ƒë·∫ßu t∆∞ qu√° 5% t·ªïng t√†i kho·∫£n v√†o m·ªôt l·ªánh\n`;
    
    return analysis;
  }
}

module.exports = SignalService;